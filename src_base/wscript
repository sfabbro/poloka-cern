# -*- mode: python; -*- 
# 
# 

import os
import os.path as op
import string
import re

import frogsutils


expr_ttester = re.compile("class\s+([\w\d_]+).+TYPE_TESTER.+")
expr_tselector = re.compile("class\s+([\w\d_]+).+TYPE_SELECTOR.+");

def scan_for_types( filename ):
    
    ret_ttester = []
    ret_tselector = []
    
    f = open(filename)
    for line in f.readlines():
        ret = expr_ttester.search(line)
        if ret != None:
            ret_ttester.append( ret.group(1) )
        ret = expr_tselector.search(line)
        if ret != None:
            ret_tselector.append( ret.group(1) )
    f.close()
    return ret_ttester, ret_tselector


def gen_alltelinst(task):
    """
    Generate the alltelinst.h and alltelinst.cc files.
    """
    
    telinst_sources = [f.srcpath() for f in task.inputs]
    telinst_sources.sort(reverse=True)
    
    # code fragments from task inputs 
    src_list = ""
    include_list = ""
    acceptor_list = ""
    declaration_list = ""
    is_of_kind_list = ""
    
    for src_path in telinst_sources:
        src_list  = src_list + " " + src_path
        include_list = include_list + '\n#include "../telinst/%s"' % op.basename(src_path)
        ttype, acctype = scan_for_types(src_path)
        for t in ttype:
            declaration_list = declaration_list + "\nclass %s;" % t 
            is_of_kind_list = is_of_kind_list + "\ntemplate bool IsOfKind<%s>(const FitsHeader &);" % t
            is_of_kind_list = is_of_kind_list + "\ntemplate bool IsOfKind<%s>(const string &);" % t
        for t in acctype:
            acceptor_list = acceptor_list + "&%s::Acceptor,\n" % t 

    
    # header file 
    tgt = task.outputs[0].abspath()
    f = open( tgt, 'w' )
    f.write("/* automatically generated from %s */\n\n" % src_list)
    f.write("#ifndef ALLTELINST__H\n#define ALLTELINST__H\n\n")
    f.write("%s" % declaration_list)
    f.write("\n#endif\n\n")
    f.close()
    
    print task.outputs
    
    # src file
    tgt = task.outputs[1].abspath()
    f = open(tgt, 'w')
    f.write("/* automatically generated from %s */\n\n" % src_list)
    f.write("%s\n\n" % include_list)
    f.write("""#ifndef USE_WCS
/* This array is scanned backwards (in SniffTelInst), so that
derived classes are tried before base classes */
static AcceptorType AcceptorsArray [] = {
%s &Unknown::Acceptor};
%s
#endif
""" % (acceptor_list, is_of_kind_list) )
    f.close()


def build(bld):
    
    sources = bld.path.ant_glob('*.cc', excl=['virtualinstrument.cc', 
                                              'alltelinst.cc'])
    c_sources = bld.path.ant_glob('*.c', excl=['slasub.c', 'trapfpe.c'])
    
    if 'HAVE_FEENABLEEXCEPT' in bld.env:
        c_sources += ['trapfpe.c']
    
    #    bld.path.find_dir('../telinst').abspath()
    telinst_sources = bld.path.find_dir('../telinst').ant_glob('*.cc')    
    bld ( name   = 'alltelinst', 
          rule = gen_alltelinst, 
          source = telinst_sources,
          target = ["alltelinst.h", "alltelinst.cc"], 
          before = 'cc cxx' )    
    
    # src_base library
    local_libs = []
    if not bld.env.global_lapack:
        local_libs = ['lapack_stuff']
    libs = ['m', 'z']
    if bld.env.global_lapack:
        libs.append('lapack')
        
    lib = bld.shlib(
        source   = sources + c_sources,
        target   = 'toads_base', 
        includes = [ '.' ], 
        lib      = libs, 
        use      = local_libs,
        uselib   = ['CFITSIO'],
        vnum     = frogsutils.get_version_number(),
        after    = 'alltelinst')
    
    lib.rpath  = [ bld.env['PREFIX'] + '/lib'] 
    lib.rpath += bld.env['LIBPATH_CFITSIO']


    # install the headers 
    headers = bld.path.ant_glob('*.h') + ['alltelinst.h']
    bld.install_files('${PREFIX}/${PKG_INCDIR}', headers)
    
